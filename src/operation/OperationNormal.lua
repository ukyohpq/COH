---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ukyohpq.
--- DateTime: 17/12/7 15:12
---

---@class operation.OperationNormal:operation.OperationComponent
local OperationNormal = class("operation.OperationNormal", require("operation.OperationComponent"))

---canHold
---@param unit unit.Unit
function OperationNormal:canHold(unit)
    return self:checkHoldType(unit) and self:checkHoldWay(unit)
end

---checkHoldType
---@param unit unit.Unit
function OperationNormal:checkHoldType(unit)
    return TypeOperations[unit.unitData.type].hold == 1
end

---checkHoldWay
---@param unit unit.Unit
function OperationNormal:checkHoldWay(unit)
    local grids = unit.grids
    --取出unit占据的格子中，各列最底部的格子
    ---@type Grid[]
    local lineBottomGrids = {}
    for _, grid in ipairs(grids) do
        local l = grid.line
        if lineBottomGrids[l] == nil then
            lineBottomGrids[l] = grid
        else
            if lineBottomGrids[l].row < grid.row then
                lineBottomGrids[l] = grid
            end
        end
    end
    --检测这些最底部的格子的下面，是否有遮挡
    for _, grid in ipairs(lineBottomGrids) do
        local l = grid.line
        local lineSole = self.side.map.lines[l]
        for i = grid.row + 1, COHConst.MAX_ROW do
            local bGrid = lineSole:getGridAt(i)
            --如果下面的格子有unit，即是说有遮挡，则不可以拿起
            if bGrid:getUnit() ~= nil then
                return false
            end
        end
    end
    --所有的最底部的格子没有遮挡，则可以拿起
    return true
end
---canAssistTrans
---@param unit unit.Unit
function OperationNormal:canAssistTrans(unit)
    return TypeOperations[unit.unitData.type].assistTrans == 1
end

---canTransAttack
---@param unit unit.Unit
function OperationNormal:canTransAttack(unit)
    return TypeOperations[unit.unitData.type].transAttack == 1
end

---canTransDefence
---@param unit unit.Unit
function OperationNormal:canTransDefence(unit)
    return TypeOperations[unit.unitData.type].transDefence == 1
end

---canAssistDefence
---@param unit unit.Unit
function OperationNormal:canAssistDefence(unit)
    return TypeOperations[unit.unitData.type].assistDefence == 1
end
---canDelete
---@param unit unit.Unit
function OperationNormal:canDelete(unit)
    return TypeOperations[unit.unitData.type].delete == 1
end

---canMerge
---@param unit unit.Unit
function OperationNormal:canMerge(unit)
    return TypeOperations[unit.unitData.type].merge == 1
end

return OperationNormal
